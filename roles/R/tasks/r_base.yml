---

- name: download r {{ version }}
  tags: r_base
  get_url: 
    url: "{{ r_dl_url_base }}/R-{{ version.split('.')[0] }}/R-{{ version }}.tar.gz"
    dest: "{{ source_dir }}/R-{{ version }}.tar.gz"

- name: uncompress r {{ version }}
  tags: r_base
  unarchive:
      src: "{{ source_dir }}/R-{{ version }}.tar.gz"
      dest: "{{ source_dir }}"
      copy: no

# - name: "build r {{ version }}"
#   tags: r_base
#   shell: |
#     cd {{ source_dir }}/R-{{ version }}
#     make clean
#     ./configure --prefix={{ apps_dir }}/R/{{ version }} --enable-R-shlib --enable-memory-profiling
#     make -j {{ threads }}; make install
#   args:
#     creates: "{{ apps_dir }}/R/{{ version }}/bin/Rscript"
#   when: (ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int < 20)

# For Ubuntu 20.04 (and later ?) we use gfortran-10
- name: build r {{ version }}
  tags: r_base
  shell: |
    # for R 4.0.x
    export FC=$(which gfortran-10)
    
    # for 3.6.x
    # export FC=$(which gfortran-9)

    # for 3.5.x ?
    # tried fort77, gfortran-7, gfortran-9, gfortran-10 -- all failed ?

    # for 3.4.x ?
    # export FC=$(which fort77)
    
    cd {{ source_dir }}/R-{{ version }}
    make clean
    ./configure --prefix={{ apps_dir }}/R/{{ version }} --enable-R-shlib --enable-memory-profiling
    make -j {{ threads }}
    make install
  args:
    creates: "{{ apps_dir }}/R/{{ version }}/bin/Rscript"
  #when: ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int >= 20

##
# TODO: This extra R library stuff should probably happen only in r_extras, 
#       or a training server task, to keep base R modules lean.
#       Commented for now.
##

# install required packages from CRAN and Bioconductor
# - name: check CRAN and bioconductor R scripts exist
#   stat:
#     path: "{{ playbook_dir }}/scripts/R/{{ item }}"
#   with_items:
#       - cran.R
#       - bioconductor.R
#   delegate_to: localhost
#   register: e

#   tags: r_base

# - file:
#     dest: "{{ tmp_dir }}/scripts/R"
#     state: directory
#     mode: 0755
#   with_items: "{{ e.results }}"
#   when: item.stat.exists
  
#   tags: r_base

# - name: copy R scripts {{ tmp_dir }}
#   copy:
#     src: "{{ playbook_dir }}/scripts/R/{{ item.item }}"
#     dest: "{{ tmp_dir }}/scripts/R"
#   with_items: "{{ e.results }}"
#   when: item.stat.exists

#   tags: r_base

# - name: run R scripts to install packages
#   shell: "{{ apps_dir }}/R/{{ version }}/bin/Rscript {{ tmp_dir }}/scripts/R/{{ item.item }} {{ r_base_mirror }} {{ apps_dir }}/R/{{ r_base_version }}/{{ r_lib_path }}"
#   with_items: "{{ e.results }}"
#   when: item.stat.exists

#   tags: r_base

- name: Ensure "{{ modules_core }}/R" exists
  tags: r_base
  file:
    dest: "{{ modules_core }}/R"
    state: directory
    mode: 0755

- name: r {{ version }} module definition
  tags: r_base
  template:
    src: sw-module.lua.j2
    dest: "{{ modules_core }}/R/{{ version }}.lua"
    owner: "{{ main_guy }}"
    mode: 0644
  with_items:
    - dir: "R/{{ version }}"
      help_text: 'R language base'
#      env:
#        - name: R_HOME
#          value: "{{ apps_dir }}/R/{{ version }}/bin/R"

- name: setting register for r {{ version }}
  tags: r_base
  stat:
    path: "{{ apps_dir }}/R-{{ version }}/bin/Rscript"
  register: r

- name: removing r {{ version }} source file
  tags: r_base
  file:
    dest: "{{ source_dir }}/R-{{ version }}.tar.gz"
    state: absent
  when: "del_src and r.stat.exists"


